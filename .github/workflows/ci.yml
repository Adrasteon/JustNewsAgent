name: CI

# Run on manual dispatch and pull requests to main/dev branches
on:
  workflow_dispatch: {}
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]
  schedule:
    - cron: "0 3 * * *"  # nightly deep scan at 03:00 UTC

jobs:
  test:
    name: Run tests (conda environment)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        # TODO: replace the placeholder SHA below with the real full-length commit SHA for the
        # conda-incubator/setup-miniconda action. Pinning to a full commit SHA reduces supply-chain risk.
        # Example: uses: conda-incubator/setup-miniconda@3b1a2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a90
        uses: conda-incubator/setup-miniconda@1111111111111111111111111111111111111111
        with:
          python-version: 3.12
          auto-update-conda: true
          activate-environment: justnews-v2-py312
          environment-file: environment.yml
          use-mamba: true

      - name: Install additional dependencies
        shell: bash -l {0}
        run: |
          # Ensure we're in the activated environment
          conda activate justnews-v2-py312

          # Upgrade pip and install any additional requirements
          pip install -U pip setuptools wheel

          # Install requirements.txt dependencies (if not already covered by environment.yml)
          pip install -r requirements.txt

      - name: Run unit tests
        shell: bash -l {0}
        run: |
          conda activate justnews-v2-py312
          # Run unit tests only (exclude integration tests)
          pytest -v -k "not integration" --tb=short --maxfail=5

      - name: Run integration tests (optional)
        shell: bash -l {0}
        run: |
          conda activate justnews-v2-py312
          # Run integration tests if they exist
          pytest -v -k "integration" --tb=short --maxfail=3 || echo "No integration tests found or failed"
        continue-on-error: true

      - name: Generate test coverage report
        shell: bash -l {0}
        run: |
          conda activate justnews-v2-py312
          # Install coverage tools if not present
          pip install pytest-cov coverage

          # Run tests with coverage
          pytest --cov=. --cov-report=xml --cov-report=term -k "not integration"
        continue-on-error: true

      - name: Upload coverage reports
        # TODO: replace the placeholder SHA below with the real full-length commit SHA for the
        # codecov/codecov-action action. Pinning to a full commit SHA reduces supply-chain risk.
        # Example: uses: codecov/codecov-action@0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a90
        uses: codecov/codecov-action@2222222222222222222222222222222222222222
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  version-compliance:
    name: Version Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run version compliance validation
        run: |
          python scripts/validate_version_compliance.py

      - name: Run version consistency check
        run: |
          python scripts/validate_versions.py

  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort pylint semgrep lizard pytest

      - name: Run ruff (full)
        run: ruff check .

      - name: Run isort check
        run: isort --check-only .

      - name: Run black check
        run: black --check .

      - name: Run pylint
        run: |
          # run pylint across agents and common modules (avoid enormous global run time)
          pylint agents common || true

      - name: Run Semgrep (CI rules)
        run: semgrep --config .semgrep/full-rules.yml --exclude .git --quiet || true

      - name: Run complexity checks (lizard)
        run: lizard -C 8 -l python agents | tee lizard-report.txt || true

      - name: Run tests (pytest)
        run: pytest -q

  nightly-deep-scan:
    needs: lint-and-test
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install deep-scan tools
        run: |
          python -m pip install --upgrade pip
          pip install semgrep trivy codacy-cli lizard

      - name: Run Semgrep full
        run: semgrep --config .semgrep/full-rules.yml --quiet || true

      - name: Run Trivy (dependency scan)
        run: |
          trivy fs --exit-code 1 --severity CRITICAL,HIGH || true

      - name: Save lizard report
        run: lizard -l python agents > lizard-deep-report.txt || true

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            lizard-deep-report.txt
            semgrep-report.json || true
